# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Select service'
        required: true
        default: 'user_task'
        type: choice
        options:
          - user_task
          - chat_task
          - notification_consumer

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: software-architecture-course
  ECS_USER_SERVICE: zalo-phake-user-be-srv
  ECS_CHAT_SERVICE: zalo-phake-chat-be-srv
  ECS_NOTI_CONSUMER_SERVICE: zalo-phake-chat-noti-srv
  ECS_CLUSTER: zalo-phake-course
  ECS_USER_TASK_DEFINITION: chat_app/deployments/task-definition.json
  FIREBASE_SECRET_CREDENTIALS: ./chat_app/app/firebase_key/zalophake.json
  ECS_CHAT_TASK_DEFINITION: chat_management/deployments/task-definition.json
  ECS_NOTI_CONSUMER_TASK_DEFINITION: chat_management/notification_consumer/task-definition.json
  USER_DOCKERFILE: ./chat_app
  CHAT_DOCKERFILE: ./chat_management
  NOTI_CONSUMER_DOCKERFILE: ./chat_management/notification_consumer

  USER_CONTAINER_NAME: zalo-phake-user-be
  CHAT_CONTAINER_NAME: zalo-phake-chat-be
  NOTI_CONSUMER_CONTAINER_NAME: zalo-phake-notification-consumer


jobs:
  wait_for_approval:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    outputs:
      ecs_service: ${{ steps.set_ecs_config.outputs.ecs_service }}
      ecs_task_definition: ${{ steps.set_ecs_config.outputs.ecs_task_definition }}
      dockerfile: ${{ steps.set_ecs_config.outputs.dockerfile }}
      container_name: ${{ steps.set_ecs_config.outputs.container_name }}
    steps:
      - name: Selection service
        uses: trstringer/manual-approval@51b76c4576aad25fefe130f04f4cc4de75814e94
        if: github.event_name == 'push'
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Deployment approval needed"
          issue-body: |
            Approval is required for deploying ${{ github.ref }}.
            Please comment 'approve' along with your desired configuration:
            - For user_task: 'user_task'
            - For chat_task: 'chat_task'
            - For notification_consumer: 'notification_consumer'
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: 'user_task, chat_task, notification_consumer'

      - name: Set ECS Configuration
        id: set_ecs_config
        run: |
          # For push events, default to user_task after approval
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "ecs_service=${{ env.ECS_USER_SERVICE }}" >> $GITHUB_OUTPUT
            echo "ecs_task_definition=${{ env.ECS_USER_TASK_DEFINITION }}" >> $GITHUB_OUTPUT
            echo "dockerfile=${{ env.USER_DOCKERFILE }}" >> $GITHUB_OUTPUT
            echo "container_name=${{ env.USER_CONTAINER_NAME }}" >> $GITHUB_OUTPUT
          else
            # For workflow_dispatch, use the input
            if [[ "${{ github.event.inputs.deployment_target }}" == "user_task" ]]; then
              echo "ecs_service=${{ env.ECS_USER_SERVICE }}" >> $GITHUB_OUTPUT
              echo "ecs_task_definition=${{ env.ECS_USER_TASK_DEFINITION }}" >> $GITHUB_OUTPUT
              echo "dockerfile=${{ env.USER_DOCKERFILE }}" >> $GITHUB_OUTPUT
              echo "container_name=${{ env.USER_CONTAINER_NAME }}" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.inputs.deployment_target }}" == "notification_consumer" ]]; then
              echo "ecs_service=${{ env.ECS_NOTI_CONSUMER_SERVICE }}" >> $GITHUB_OUTPUT
              echo "ecs_task_definition=${{ env.ECS_NOTI_CONSUMER_TASK_DEFINITION }}" >> $GITHUB_OUTPUT
              echo "dockerfile=${{ env.NOTI_CONSUMER_DOCKERFILE }}" >> $GITHUB_OUTPUT
              echo "container_name=${{ env.NOTI_CONSUMER_CONTAINER_NAME }}" >> $GITHUB_OUTPUT
            else
              echo "ecs_service=${{ env.ECS_CHAT_SERVICE }}" >> $GITHUB_OUTPUT
              echo "ecs_task_definition=${{ env.ECS_CHAT_TASK_DEFINITION }}" >> $GITHUB_OUTPUT
              echo "dockerfile=${{ env.CHAT_DOCKERFILE }}" >> $GITHUB_OUTPUT
              echo "container_name=${{ env.CHAT_CONTAINER_NAME }}" >> $GITHUB_OUTPUT
            fi
          fi

  deploy:
    needs: wait_for_approval
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && needs.wait_for_approval.result == 'success')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v3
        with:
          version: '1.7'
          force: 'true'

      - name: Get Firebase credentials from AWS Secrets Manager
        id: firebase-credentials
        env:
          FIREBASE_SECRET: ${{ secrets.FIREBASE_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REDIS_HOST: ${{ secrets.CHAT_REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.CHAT_REDIS_PASSWORD }}
        run: |
          echo "$FIREBASE_SECRET" > ${{ env.FIREBASE_SECRET_CREDENTIALS }}
          A=$(printf '%s' "$FIREBASE_SECRET" | jq tostring)
          B="${A//\\/\\\\}"
          
          # Replace placeholders in the task definition based on the deployment target
          if [[ "${{ needs.wait_for_approval.outputs.ecs_task_definition }}" == "${{ env.ECS_CHAT_TASK_DEFINITION }}" ]]; then
            sed -i "s|\"<firebase_secret>\"|$B|g" ./${{ env.ECS_CHAT_TASK_DEFINITION }}
            sed -i "s|<aws_access_key_id>|$AWS_ACCESS_KEY_ID|g" ./${{ env.ECS_CHAT_TASK_DEFINITION }}
            sed -i "s|<aws_secret_access_key>|$AWS_SECRET_ACCESS_KEY|g" ./${{ env.ECS_CHAT_TASK_DEFINITION }}
            sed -i "s|<redis_host>|$REDIS_HOST|g" ./${{ env.ECS_CHAT_TASK_DEFINITION }}
            sed -i "s|<redis_password>|$REDIS_PASSWORD|g" ./${{ env.ECS_CHAT_TASK_DEFINITION }}
          fi
          
          # Handle notification consumer task definition
          if [[ "${{ needs.wait_for_approval.outputs.ecs_task_definition }}" == "${{ env.ECS_NOTI_CONSUMER_TASK_DEFINITION }}" ]]; then
            sed -i "s|<aws_access_key_id>|$AWS_ACCESS_KEY_ID|g" ./${{ env.ECS_NOTI_CONSUMER_TASK_DEFINITION }}
            sed -i "s|<aws_secret_access_key>|$AWS_SECRET_ACCESS_KEY|g" ./${{ env.ECS_NOTI_CONSUMER_TASK_DEFINITION }}
            sed -i "s|\"<firebase_secret>\"|$B|g" ./${{ env.ECS_NOTI_CONSUMER_TASK_DEFINITION }}
          fi

      - name: Cat firebase-credentials.json
        run: |
          cat ${{ env.FIREBASE_SECRET_CREDENTIALS }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          DOCKER_BUILDKIT=0 docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{ needs.wait_for_approval.outputs.dockerfile }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ needs.wait_for_approval.outputs.ecs_task_definition }}
          container-name: ${{ needs.wait_for_approval.outputs.container_name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ needs.wait_for_approval.outputs.ecs_service }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
