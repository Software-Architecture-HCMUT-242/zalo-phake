@startuml SQS Notification Flow (No Lambda)

!theme vibrant

actor "API Service" as API
queue "SQS Main Queue" as MainQueue
queue "SQS Retry Queue" as RetryQueue
queue "SQS DLQ" as DLQ
participant "Notification Consumer Service" as Consumer
database "Firebase" as Firebase

activate API
API -> MainQueue : Publish Notification Event\n(e.g., new_message)
deactivate API

activate Consumer
loop Processing Loop
    Consumer -> MainQueue : Receive Messages
    activate MainQueue

    alt Messages Received
        MainQueue --> Consumer : Notification Event(s)
        deactivate MainQueue

        loop For Each Message
            Consumer -> Firebase : Get User Preferences/Tokens
            activate Firebase
            Firebase --> Consumer : Preferences/Tokens
            deactivate Firebase

            alt User is Offline & Prefs Enabled
                Consumer -> Firebase : Send FCM Notification
                activate Firebase
                Firebase --> Consumer : FCM Result
                deactivate Firebase

                Consumer -> Firebase : Store Notification History
                activate Firebase
                Firebase --> Consumer : Store Result
                deactivate Firebase
            else User Online or Prefs Disabled
                 Consumer -> Consumer: Skip Push Notification
            end

            alt Processing Successful
                Consumer -> MainQueue : Delete Message
                activate MainQueue
                MainQueue --> Consumer : Delete Confirmation
                deactivate MainQueue
            else Processing Failed (Transient Error)
                Consumer -> RetryQueue : Send Message (with delay)
                activate RetryQueue
                RetryQueue --> Consumer : Send Confirmation
                deactivate RetryQueue
                Consumer -> MainQueue : Delete Message
                activate MainQueue
                MainQueue --> Consumer : Delete Confirmation
                deactivate MainQueue
            else Processing Failed (Permanent Error / Max Retries Reached)
                Consumer -> DLQ : Send Message
                activate DLQ
                DLQ --> Consumer : Send Confirmation
                deactivate DLQ
                 alt Message came from Retry Queue
                      Consumer -> RetryQueue : Delete Message
                      activate RetryQueue
                      RetryQueue --> Consumer : Delete Confirmation
                      deactivate RetryQueue
                 else Message came from Main Queue
                      Consumer -> MainQueue : Delete Message
                      activate MainQueue
                      MainQueue --> Consumer : Delete Confirmation
                      deactivate MainQueue
                 end
            end
        end
    else No Messages in Main Queue
        MainQueue --> Consumer : No Messages
        deactivate MainQueue

        ' Try processing retry queue
        Consumer -> RetryQueue : Receive Messages
        activate RetryQueue
        alt Messages Received from Retry Queue
            RetryQueue --> Consumer : Notification Event(s) for Retry
            deactivate RetryQueue
            ' Process retry messages (similar logic as above but targets RetryQueue for deletion/DLQ)
            note right of Consumer
                Processing logic for retried messages:
                - Attempt processing again.
                - On success, delete from RetryQueue.
                - On transient failure (before max retries), resend to RetryQueue with increased delay, delete from RetryQueue.
                - On permanent failure or max retries, send to DLQ, delete from RetryQueue.
            end note

        else No Messages in Retry Queue
            RetryQueue --> Consumer : No Messages
            deactivate RetryQueue
            Consumer -> Consumer : Wait briefly
        end
    end
end

deactivate Consumer

@enduml