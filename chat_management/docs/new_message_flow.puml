@startuml New Message Flow (Online Recipient)
actor "User A" as UserA
participant "API Instance B (FastAPI)" as InstB
participant "Firestore" as FS
participant "AWS ElastiCache (Redis Pub/Sub)" as ElastiCache
participant "API Instance C (FastAPI)" as InstC
actor "User B (Online)" as UserB

UserA -> InstB : POST /conversations/{conv_id}/messages
activate InstB
InstB -> FS : Save Message
activate FS
FS --> InstB : Message Saved (msg_id)
InstB -> FS : Update Conversation (lastMessage)
FS --> InstB : Conversation Updated
deactivate FS

InstB -> ElastiCache : PUBLISH(channel: conversation:{conv_id}, event: new_message{...})
activate ElastiCache
ElastiCache --> InstB : Published

note right of InstB
  Instance B also sends task
  to SQS for offline handling
  (See SQS diagram)
end note

ElastiCache --> InstC : Receive(channel: conversation:{conv_id}, event: new_message{...})
deactivate ElastiCache
activate InstC
InstC -> InstC : Check local connections for User B in {conv_id}
InstC -> UserB : WebSocket Send (new_message{...})
activate UserB
deactivate InstC
UserB --> UserB : Display Message
deactivate UserB
deactivate InstB

@enduml